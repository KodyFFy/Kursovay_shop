
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/keyshop-nextjs/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  isAdmin   Boolean  @default(false)
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  cartItems CartItem[]
  balanceTransactions BalanceTransaction[]
  reviews Review[]

  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String
  parentId    String?
  
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String?
  categoryId  String
  isFeatured  Boolean @default(false)
  isActive    Boolean @default(true)
  licenseKey  String?
  isSold      Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  orders   Order[]
  cartItems CartItem[]
  reviews  Review[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  productId     String
  amount        Float
  status        OrderStatus @default(PENDING)
  paymentMethod String
  licenseKey    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("orders")
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model BalanceTransaction {
  id          String                    @id @default(cuid())
  userId      String
  amount      Float
  type        BalanceTransactionType
  description String
  orderId     String?
  createdAt   DateTime                  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("balance_transactions")
}

enum BalanceTransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  REFUND
}

enum UserRole {
  USER
  ADMIN
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Float    // 4.0 - 5.0
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}
